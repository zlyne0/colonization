package net.sf.freecol.common.model;

import net.sf.freecol.common.model.player.Player;
import net.sf.freecol.common.model.specification.GameOptions;
import net.sf.freecol.common.model.specification.Modifier;

import java.io.IOException;

import promitech.colonization.savegame.XmlNodeAttributes;
import promitech.colonization.savegame.XmlNodeAttributesWriter;
import promitech.colonization.ui.resources.StringTemplate;

public class ColonyLiberty {

    private int sonsOfLiberty = 0;
    private int tories = 0;

    /**
     * The number of liberty points.  Liberty points are an
     * abstract game concept.  They are generated by but are not
     * identical to bells, and subject to further modification.
     */
    protected int liberty = 0;

    public void copy(ColonyLiberty colonyLiberty) {
        this.sonsOfLiberty = colonyLiberty.sonsOfLiberty;
        this.tories = colonyLiberty.tories;
        this.liberty = colonyLiberty.liberty;
    }

    public void updateSonOfLiberty(Player player, int unitsCount) {
        sonsOfLiberty = calculateSoLPercentage(player, unitsCount, liberty);
        tories = unitsCount - rebels(unitsCount);
    }

    public int rebels(int unitsCount) {
        return (int)Math.floor(0.01 * sonsOfLiberty * unitsCount);
    }

    /**
     * Gets the number of units that would be good to add/remove from this
     * colony.  That is the number of extra units that can be added without
     * damaging the production bonus, or the number of units to remove to
     * improve it.
     *
     * @return The number of units to add to the colony, or if negative
     *      the negation of the number of units to remove.
     */
    public int getPreferredSizeChange(Player player, Modifier productionBonus, int unitsCount) {
        int i, limit;
        if (productionBonus.getValue() < 0) {
            limit = unitsCount;
            for (i = 1; i < limit; i++) {
                if (governmentChange(player,unitsCount - i, unitsCount) == 1) break;
            }
            return -i;
        } else {
            limit = Specification.options.getIntValue(GameOptions.BAD_GOVERNMENT_LIMIT);
            for (i = 1; i < limit; i++) {
                if (governmentChange(player, unitsCount + i, unitsCount) == -1) break;
            }
            return i - 1;
        }
    }

    /**
     * Returns 1, 0, or -1 to indicate that government would improve,
     * remain the same, or deteriorate if the colony had the given
     * population.
     *
     * @param unitCount The proposed population for the colony.
     * @return 1, 0 or -1.
     */
    private int governmentChange(Player player, int unitCount, int actualUnitCount) {
        final int veryBadGovernment = Specification.options.getIntValue(GameOptions.VERY_BAD_GOVERNMENT_LIMIT);
        final int badGovernment = Specification.options.getIntValue(GameOptions.BAD_GOVERNMENT_LIMIT);
        final int veryGoodGovernment = Specification.options.getIntValue(GameOptions.VERY_GOOD_GOVERNMENT_LIMIT);
        final int goodGovernment = Specification.options.getIntValue(GameOptions.GOOD_GOVERNMENT_LIMIT);

        int rebelPercent = calculateSoLPercentage(player, unitCount, liberty);
        int rebelCount = rebels(actualUnitCount);
        int loyalistCount = unitCount - rebelCount;

        int result = 0;
        if (rebelPercent >= veryGoodGovernment) { // There are no tories left.
            if (sonsOfLiberty < veryGoodGovernment) {
                result = 1;
            }
        } else if (rebelPercent >= goodGovernment) {
            if (sonsOfLiberty >= veryGoodGovernment) {
                result = -1;
            } else if (sonsOfLiberty < goodGovernment) {
                result = 1;
            }
        } else {
            if (sonsOfLiberty >= goodGovernment) {
                result = -1;
            } else { // Now that no bonus is applied, penalties may.
                if (loyalistCount > veryBadGovernment) {
                    if (tories <= veryBadGovernment) {
                        result = -1;
                    }
                } else if (loyalistCount > badGovernment) {
                    if (tories <= badGovernment) {
                        result = -1;
                    } else if (tories > veryBadGovernment) {
                        result = 1;
                    }
                } else {
                    if (tories > badGovernment) {
                        result = 1;
                    }
                }
            }
        }
        return result;
    }

    /**
     * Calculate the SoL membership percentage of the colony based on the
     * number of colonists and liberty.
     *
     * @param uc The proposed number of units in the colony.
     * @param liberty The amount of liberty.
     * @return The percentage of SoLs, negative if not calculable.
     */
    private int calculateSoLPercentage(Player player, int uc, int liberty) {
        if (uc <= 0) {
            return -1;
        }
        float membership = (liberty * 100.0f) / (Colony.LIBERTY_PER_REBEL * uc);
        membership = player.getFeatures().applyModifier(Modifier.SOL, membership);

        if (membership < 0.0f) {
            membership = 0.0f;
        } else if (membership > 100.0f) {
            membership = 100.0f;
        }
        return (int)membership;
    }

    void calculateSonsOfLiberty(Player player, int bellsProduction, int actualUnitsCount) {
        liberty = Math.max(0, liberty + bellsProduction);
        updateSonOfLiberty(player, actualUnitsCount);

        boolean capped = Specification.options.getBoolean(GameOptions.BELL_ACCUMULATION_CAPPED);
        if (capped && sonsOfLiberty >= 100) {
            liberty = Colony.LIBERTY_PER_REBEL * actualUnitsCount;
        }
    }

    void sonsOfLibertyChangeNotification(Colony colony, int oldSonsOfLiberty) {
        if (sonsOfLiberty / 10 != oldSonsOfLiberty / 10) {
            String templateName;
            if (sonsOfLiberty > oldSonsOfLiberty) {
                templateName = "model.colony.SoLIncrease";
            } else {
                templateName = "model.colony.SoLDecrease";
            }
            StringTemplate t = StringTemplate.template(templateName)
                    .add("%colony%", colony.getName())
                    .addAmount("%newSoL%", sonsOfLiberty);
            colony.owner.eventsNotifications.addMessageNotification(t);
        }
    }

    public void reset() {
        this.liberty = 0;
        this.sonsOfLiberty = 0;
        this.tories = 0;
    }

    public int productionBonus() {
        final int veryBadGovernment = Specification.options.getIntValue(GameOptions.VERY_BAD_GOVERNMENT_LIMIT);
        final int badGovernment = Specification.options.getIntValue(GameOptions.BAD_GOVERNMENT_LIMIT);
        final int veryGoodGovernment = Specification.options.getIntValue(GameOptions.VERY_GOOD_GOVERNMENT_LIMIT);
        final int goodGovernment = Specification.options.getIntValue(GameOptions.GOOD_GOVERNMENT_LIMIT);
        return (sonsOfLiberty >= veryGoodGovernment) ? 2
            : (sonsOfLiberty >= goodGovernment) ? 1
            : (tories > veryBadGovernment) ? -2
            : (tories > badGovernment) ? -1
            : 0;
    }

    public int tories() {
        return tories;
    }

    public int sonsOfLiberty() {
        return sonsOfLiberty;
    }

    public void setLibertyForProductionBonus(int colonyUnitsCount) {
        liberty = Colony.LIBERTY_PER_REBEL * (colonyUnitsCount + 1);
    }

    public void setLibertyForOneProductionBonus(int colonyUnitsCount) {
        liberty += Colony.LIBERTY_PER_REBEL * ((colonyUnitsCount / 2) + 1);
    }

    public static class Xml {
        private static final String ATTR_LIBERTY = "liberty";
        private static final String ATTR_TORIES = "tories";
        private static final String ATTR_SONS_OF_LIBERTY = "sonsOfLiberty";

        public static void read(ColonyLiberty colonyLiberty, XmlNodeAttributes attr) {
            colonyLiberty.sonsOfLiberty = attr.getIntAttribute(ATTR_SONS_OF_LIBERTY, 0);
            colonyLiberty.tories = attr.getIntAttribute(ATTR_TORIES, 0);
            colonyLiberty.liberty = attr.getIntAttribute(ATTR_LIBERTY, 0);
        }

        public static void write(ColonyLiberty colonyLiberty, XmlNodeAttributesWriter attr) throws IOException {
            attr.set(ATTR_SONS_OF_LIBERTY, colonyLiberty.sonsOfLiberty, 0);
            attr.set(ATTR_TORIES, colonyLiberty.tories, 0);
            attr.set(ATTR_LIBERTY, colonyLiberty.liberty, 0);
        }
    }
}
